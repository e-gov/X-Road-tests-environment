library identifier: "testJob@${PIPELINE_BRANCH}", retriever: modernSCM(
[$class: 'GitSCMSource',
remote: "${SHARED_LIB_REPOSITORY}",
credentialsId: "${LIBRARY_KEY}"])

def test_environment_type = collectParamsEnv("ENV_TYPE")
setupEnvTests("${test_environment_type}")

def test_environment_type_upp = test_environment_type.toUpperCase()
def test_repository = ""
def credential_key = ""

if ("${LIBRARY_KEY}" == "httpsgit") {
    test_repository = collectParamsEnv("${test_environment_type_upp}_TEST_REPOSITORY_HTTPS")
    credential_key = collectParamsEnv("CREDENTIAL_KEY_HTTPS")
}
else {
    test_repository = collectParamsEnv("${test_environment_type_upp}_TEST_REPOSITORY")
    credential_key = collectParamsEnv("CREDENTIAL_KEY")
}

def test_branch = collectParamsEnv("${test_environment_type_upp}_TEST_BRANCH")
def sensitive_repository_subfolder = collectParamsEnv("SENSITIVE_REPOSITORY_SUBFOLDER")
def sensitive_data_dir = collectParamsEnv("SENSITIVE_DATA_DIR")
def sensitive_branch = collectParamsEnv("SENSITIVE_BRANCH")
def test_repository_subfolder = collectParamsEnv("TEST_REPOSITORY_SUBFOLDER")
def test_project_dir = collectParamsEnv("TEST_PROJECT_DIR")
def TA_ENV_PARAMETERS = "${test_environment_type}_parameters"
def execution_command = makeQautomateExecCommand("${TEST_OR_PROFILE_NAME}")

def test_data_path = null
def cert_copy_source_path = null


if(test_environment_type == "lxd") {
    echo("data/${TA_ENV_PARAMETERS}/${TEST_DATA}")
    test_data_path = "data/${TA_ENV_PARAMETERS}/${TEST_DATA}"
    cert_copy_source_path = "/home/jenkins/certs"
} else {
    echo("${TEMP_WS}/${sensitive_testdata_dir}/${TA_ENV_PARAMETERS}/${TEST_DATA}")
    test_data_path = "${TEMP_WS}/${sensitive_data_dir}/${TA_ENV_PARAMETERS}/${TEST_DATA}"
    cert_copy_source_path = "/home/jenkins/slave-node-root/workspace/${env.JOB_NAME}/${sensitive_data_dir}"
}



pipeline {

    agent {
            label env.AGENT
    }


    stages {
        stage ("Checkout and Setup") {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: "${test_branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${test_repository_subfolder}"]], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credential_key}", url: "${test_repository}"]]])
                    if("${test_environment_type}" == "lxd") {
                        echo("in lxd")
                    } else {
                        checkout([$class: 'GitSCM', branches: [[name: "${sensitive_branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${sensitive_repository_subfolder}"]], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credential_key}", url: "${sensitive_repository}"]]])

                    }


                    sh """
ls -la
echo $WORKSPACE
sudo rm -f $WORKSPACE/$test_project_dir/data/ca.cert.pem
sudo rm -f $WORKSPACE/$test_project_dir/data/tsa.cert.pem
sudo rm -f $WORKSPACE/$test_project_dir/data/ocsp.cert.pem
cp -f $cert_copy_source_path/ca.cert.pem $WORKSPACE/$test_project_dir/data/ca.cert.pem
cp -f $cert_copy_source_path/tsa.cert.pem $WORKSPACE/$test_project_dir/data/tsa.cert.pem
cp -f $cert_copy_source_path/ocsp.cert.pem $WORKSPACE/$test_project_dir/data/ocsp.cert.pem
 """

        py command: """
import os
print os.environ
MEMBER_NAME = os.environ['MEMBER_NAME']
MEMBER_CLASS = os.environ['MEMBER_CLASS']
MEMBER_NAME_SUB = os.environ['MEMBER_NAME_SUB']
MEMBER_CODE = os.environ['MEMBER_CODE']
SERVER_FULL_URL = os.environ['SERVER_FULL_URL']
CENTRAL_SERVER_URL = os.environ['CENTRAL_SERVER_URL']
TSP_URL = os.environ['TSP_URL']
XROAD_ID = os.environ['XROAD_ID']
SYNC_TIMEOUT = os.environ['SYNC_TIMEOUT']
LOGIN_CS_USERNAME = os.environ['LOGIN_CS_USERNAME']
LOGIN_CS_PASSWORD = os.environ['LOGIN_CS_PASSWORD']
LOGIN_SS_USERNAME = os.environ['LOGIN_SS_USERNAME']
LOGIN_SS_PASSWORD = os.environ['LOGIN_SS_PASSWORD']
CS_PIN_CODE = os.environ['CS_PIN_CODE']
SS_PIN_CODE = os.environ['SS_PIN_CODE']
APPROVED_CA = os.environ['APPROVED_CA']
SIGN_CERT_SERVER = os.environ['SIGN_CERT_SERVER']
SIGN_CERT_SSH_KEY = os.environ['SIGN_CERT_SSH_KEY']
SIGNED_KEY_FORMAT = os.environ['SIGNED_KEY_FORMAT']
WORKSPACE = os.environ['PWD'] + '/workspace/' + os.environ['JOB_BASE_NAME']
GIT_WORKING_DIR = os.environ['TEST_PROJECT_DIR']

conf_file = os.getcwd() + os.sep + GIT_WORKING_DIR + os.sep + 'liityntapalvelin_asennus_konfiguraatio.txt'
if os.environ['USE_JENKINS_PARAMETERS'] == 'TRUE':
  print "here"
  f = open(conf_file,'w')
  f.write(SERVER_FULL_URL + "," + MEMBER_NAME + "," + MEMBER_CLASS + "," + MEMBER_CODE + "," + MEMBER_NAME_SUB + "," + CENTRAL_SERVER_URL + "," + TSP_URL + "," + SYNC_TIMEOUT + "," + LOGIN_CS_USERNAME + "," + LOGIN_CS_PASSWORD + "," + LOGIN_SS_USERNAME + "," + LOGIN_SS_PASSWORD + "," + XROAD_ID + "," + CS_PIN_CODE + "," + SS_PIN_CODE + "," + APPROVED_CA + "," + SIGN_CERT_SERVER + "," + SIGN_CERT_SSH_KEY + "," + SIGNED_KEY_FORMAT + "," + WORKSPACE + "," + GIT_WORKING_DIR)
  f.close()
else:
  try:
  	os.remove(conf_file)
  except:
    pass
"""
                }
            }
        }
        stage ("Build") {
            steps {
sh """
vncserver :$DISPLAY_NUMBER -geometry 1920x1080 || true
export DISPLAY=:$DISPLAY_NUMBER
export PYTHONPATH=/home/jenkins/.local/lib/python2.7/site-packages/qautomate/
export PATH=$PATH:/home/jenkins/.local/lib/python2.7/site-packages/qautomate/webframework/resources/
ls -la
env
cd $test_project_dir
ls -la
echo $test_project_dir
bash -l -c "qautorunner.py $execution_command -p $test_data_path -t 63 -b ff -s -v ogg -a $WORKSPACE/$test_project_dir/test_reports/error_logs.txt"
cd $WORKSPACE
 """
            }
        }
        stage ("Post build actions") {
            steps {
                junit '$test_project_dir/test_reports/*.xml'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '$test_project_dir/test_reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
            }
        }
    }
}
